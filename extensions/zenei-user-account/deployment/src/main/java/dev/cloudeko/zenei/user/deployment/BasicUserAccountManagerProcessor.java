package dev.cloudeko.zenei.user.deployment;

import dev.cloudeko.zenei.user.runtime.BasicUserAccountInitializer;
import dev.cloudeko.zenei.user.runtime.BasicUserAccountManager;
import dev.cloudeko.zenei.user.runtime.BasicUserAccountRecorder;
import dev.cloudeko.zenei.user.runtime.BasicUserAccountRepository;
import io.quarkus.arc.deployment.AdditionalBeanBuildItem;
import io.quarkus.arc.deployment.BeanContainerBuildItem;
import io.quarkus.arc.deployment.SyntheticBeanBuildItem;
import io.quarkus.arc.deployment.SyntheticBeansRuntimeInitBuildItem;
import io.quarkus.deployment.Capabilities;
import io.quarkus.deployment.annotations.BuildStep;
import io.quarkus.deployment.annotations.Consume;
import io.quarkus.deployment.annotations.Record;
import io.quarkus.runtime.configuration.ConfigurationException;
import jakarta.enterprise.context.Dependent;
import jakarta.inject.Singleton;

import java.util.Arrays;
import java.util.Map;
import java.util.stream.Collectors;

import static io.quarkus.deployment.Capability.*;
import static io.quarkus.deployment.annotations.ExecutionTime.RUNTIME_INIT;
import static io.quarkus.deployment.annotations.ExecutionTime.STATIC_INIT;

public class BasicUserAccountManagerProcessor {

    private static final String[] SUPPORTED_REACTIVE_CLIENTS = new String[] { REACTIVE_PG_CLIENT, REACTIVE_MYSQL_CLIENT,
            REACTIVE_MSSQL_CLIENT, REACTIVE_DB2_CLIENT, REACTIVE_ORACLE_CLIENT };

    @BuildStep
    @Record(STATIC_INIT)
    SyntheticBeanBuildItem createBasicUserInitializerConfig(BasicUserAccountRecorder recorder, Capabilities capabilities) {
        final String reactiveClient = capabilities.getCapabilities().stream()
                .filter(c -> Arrays.asList(SUPPORTED_REACTIVE_CLIENTS).contains(c))
                .findFirst()
                .orElseThrow(() -> new RuntimeException("No supported reactive SQL client found"));

        final String createTableDdl;
        final boolean supportsIfTableNotExists = switch (reactiveClient) {
            case REACTIVE_PG_CLIENT -> {
                createTableDdl = "CREATE TABLE IF NOT EXISTS zenei_user_account ("
                        + "id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "
                        + "username VARCHAR(100) NOT NULL, "
                        + "image VARCHAR(1000) NULL, "
                        + "created_at TIMESTAMP NOT NULL, "
                        + "updated_at TIMESTAMP NOT NULL)";
                yield true;
            }
            case REACTIVE_MYSQL_CLIENT -> {
                createTableDdl = "CREATE TABLE IF NOT EXISTS zenei_user_account ("
                        + "id BIGINT AUTO_INCREMENT PRIMARY KEY, "
                        + "username VARCHAR(100) NOT NULL, "
                        + "image VARCHAR(1000) NULL, "
                        + "created_at TIMESTAMP NOT NULL, "
                        + "updated_at TIMESTAMP NOT NULL)";
                yield true;
            }
            case REACTIVE_MSSQL_CLIENT -> {
                createTableDdl = "CREATE TABLE zenei_user_account ("
                        + "id BIGINT IDENTITY(1,1) PRIMARY KEY, "
                        + "username NVARCHAR(100) NOT NULL, "
                        + "image NVARCHAR(1000) NULL, "
                        + "created_at DATETIME2 NOT NULL, "
                        + "updated_at DATETIME2 NOT NULL)";
                yield false; // MSSQL doesn't support `IF NOT EXISTS` directly
            }
            case REACTIVE_DB2_CLIENT -> {
                createTableDdl = "CREATE TABLE zenei_user_account ("
                        + "id BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1), "
                        + "username VARCHAR(100) NOT NULL, "
                        + "image VARCHAR(1000), "
                        + "created_at TIMESTAMP NOT NULL, "
                        + "updated_at TIMESTAMP NOT NULL, "
                        + "PRIMARY KEY (id))";
                yield false; // DB2 doesn't support `IF NOT EXISTS` directly
            }
            case REACTIVE_ORACLE_CLIENT -> {
                createTableDdl = "CREATE TABLE zenei_user_account ("
                        + "id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "
                        + "username VARCHAR2(100) NOT NULL, "
                        + "image VARCHAR2(1000), "
                        + "created_at TIMESTAMP NOT NULL, "
                        + "updated_at TIMESTAMP NOT NULL)";
                yield true;
            }
            default -> throw new ConfigurationException("Unknown Reactive Sql Client " + reactiveClient);
        };

        return SyntheticBeanBuildItem
                .configure(BasicUserAccountInitializer.UserAccountInitializerProperties.class)
                .supplier(recorder.createUserAccountInitializerProps(createTableDdl, supportsIfTableNotExists))
                .scope(Dependent.class)
                .unremovable()
                .done();
    }

    @BuildStep
    AdditionalBeanBuildItem createBasicUserAccountInitializerBean() {
        return new AdditionalBeanBuildItem(BasicUserAccountInitializer.class);
    }

    @BuildStep
    @Record(STATIC_INIT)
    SyntheticBeanBuildItem createBasicUserAccountRepository(BasicUserAccountRecorder recorder, Capabilities capabilities) {
        final String reactiveClient = capabilities.getCapabilities().stream()
                .filter(c -> Arrays.asList(SUPPORTED_REACTIVE_CLIENTS).contains(c))
                .findFirst()
                .orElseThrow(() -> new RuntimeException("No supported reactive SQL client found"));

        final Map<String, String> config = Arrays.stream(DefaultQuery.values())
                .collect(Collectors.toMap(defaultQuery -> defaultQuery.getMetadata().queryKey(),
                        defaultQuery -> defaultQuery.getMetadata().getQuery(reactiveClient)));

        return SyntheticBeanBuildItem
                .configure(BasicUserAccountRepository.class)
                .supplier(recorder.createBasicUserAccountRepository(config))
                .scope(Singleton.class)
                .unremovable()
                .done();
    }

    @BuildStep
    AdditionalBeanBuildItem createBasicUserAccountManagerBean() {
        return new AdditionalBeanBuildItem(BasicUserAccountManager.class);
    }

    @BuildStep
    @Record(RUNTIME_INIT)
    @Consume(SyntheticBeansRuntimeInitBuildItem.class)
    void setSqlClientPool(BasicUserAccountRecorder recorder, BeanContainerBuildItem beanContainer) {
        recorder.setSqlClientPool(beanContainer.getValue());
    }
}
